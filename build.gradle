import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version '1.0.0'
group 'fr.flowarg.vip3'
archivesBaseName = 'VIP3'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    //mappings channel: 'official', version: '1.17.1'
    mappings channel: 'parchment', version: '2021.08.29-1.17.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run/client')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--username', 'FlowArg'

            mods {
                vip3 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                vip3 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'vip3', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                vip3 {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    serverShade
    clientShade
    implementation.extendsFrom serverShade
    implementation.extendsFrom clientShade
}

repositories {
    mavenCentral()
    maven {
        name = 'jdarepo'
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
        name = "JitPack"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.53'
    implementation 'org.jetbrains:annotations:22.0.0'
    serverShade('net.dv8tion:JDA:4.3.0_309') {
        exclude module: 'opus-java'
    }
    clientShade('com.github.MinnDevelopment:java-discord-rpc:v2.0.2') {
        exclude module: 'discord-rpc-release'
    }
    clientShade 'com.github.MinnDevelopment:discord-rpc-release:v3.3.0'
}

//println configurations.serverShade.copyRecursive().resolve().collect { it.absolutePath }.join('\n')
//println configurations.clientShade.copyRecursive().resolve().collect { it.absolutePath }.join('\n')

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest.attributes.put("Specification-Title", project.name)
    manifest.attributes.put("Specification-Vendor", "VIP_FlowArg")
    manifest.attributes.put("Specification-Version", project.version)
    manifest.attributes.put("Implementation-Title", project.name)
    manifest.attributes.put("Implementation-Version", project.version)
    manifest.attributes.put("Implementation-Vendor", "VIP_FlowArg")
    manifest.attributes.put("Implementation-Timestamp", new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}

task serverJar(type: ShadowJar) {
    configurations = [project.configurations.serverShade]
    from sourceSets.main.output
    exclude 'fr/flowarg/vip3/client/**'
    exclude 'fr/flowarg/vip3/data/**'
    classifier 'server'
    exclude 'org/slf4j/**'
    exclude 'javax/annotation/**'
}

task clientJar(type: ShadowJar) {
    configurations = [project.configurations.clientShade]
    from sourceSets.main.output
    exclude 'fr/flowarg/vip3/server/**'
    exclude 'fr/flowarg/vip3/data/**'
    exclude 'com/sun/**'
    classifier 'client'
}

reobf {
    clientJar {}
    serverJar {}
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
